rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function uid() {
      return request.auth.uid;
    }

    function isOwnerByUid(userId) {
      return isSignedIn() && uid() == userId;
    }

    function hasOwnerRef(data) {
      return data.userRef is document && data.userRef.path.size() == 2 && data.userRef.path[0] == "users";
    }

    function isOwnerByRef(data) {
      return hasOwnerRef(data) && uid() == data.userRef.id;
    }

    function isConversationParticipant(participantIds) {
      return isSignedIn() && participantIds is list && participantIds.hasAny([uid()]);
    }

    match /users/{userId} {
      allow read: if true;
      allow create, update: if isOwnerByUid(userId) && request.resource.data.uid == userId;
      allow delete: if false;

      match /user_property/{propertyId} {
        allow read, create, update, delete: if isOwnerByUid(userId);
      }
    }

    match /property/{propertyId} {
      allow read: if true;
      allow create: if isOwnerByUid(request.resource.data.userUid);
      allow update: if (
        isOwnerByUid(resource.data.userUid) && request.resource.data.userUid == resource.data.userUid
      ) || isOwnerByRef(resource.data) || isOwnerByRef(request.resource.data);
      allow delete: if isOwnerByUid(resource.data.userUid) || isOwnerByRef(resource.data);
    }

    match /users/{userId}/properties/{propertyId} {
      allow read, write: if isOwnerByUid(userId);
    }

    match /conversations/{conversationId} {
      allow read, update, delete: if isConversationParticipant(resource.data.participantIds);
      allow create: if isConversationParticipant(request.resource.data.participantIds)
        && request.resource.data.participantIds is list
        && request.resource.data.participantIds.size() >= 2;

      match /messages/{messageId} {
        allow create: if isConversationParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds)
          && request.resource.data.senderId == uid()
          && request.resource.data.text is string && request.resource.data.text.size() > 0;
        allow read: if isConversationParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds);
        allow update, delete: if false;
      }
    }
  }
}
